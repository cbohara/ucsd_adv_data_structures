data structures review
set = unordered grouping of objects
arrays + linked lists = sequential/linear relationship between objects
trees = nodes are related to each other as parent/child

graphs allow us to generalize the relationship between objects
basic objects = vertex/node
relationships between the vertices/nodes = edges/arcs/links

undirected/symmetric graph
ex: I am friends with you and you are friends with me
no arrows between the two nodes

directed graph
ex: task dependencies - need to finish one task before another
arrow points from one node to another

one vertex is a neighbor of another if there is an edge between them

path = hopping along the graph 

adjacency matrix
use a 2D array to rep the relationships between nodes
need to account for both directions of the relationship
0 = no directive relationship between node 1 and node 2
1 = node 1 points to node 2
if undirected graph than node 2 also points to node 1 = 1
size of the 2D matrix is (number of nodes)^2

due to how much space an adjacency matrix takes in memory, an alternative rep is
adjacency list
map associates node with a set of neighbors
when adding a new node to associated with the vertex, just add to the list of neighbors
easy to add vertices + easy to add/remove edges
uses a lot less memory vs adjacency matrix

in degree = # of incoming edges
out degree = # of outgoing edges 

##########################
depth first search (DFS)
##########################
pursue one path as deep as possible

how do we keep track of where to search next?
use a stack data structure
LIFO = last in first out
list where you add and remove from one end only
push > add an element
pop > remove an element

how do we keep track of what's been visited?
hashset = add remove and find elements in contant time

how do we keep track of the path from start to gold?
use a hashmap 
link each node to the node from which it was discovered

DFS algo
DFS(start_node, target_node):
	initialize stack, visited hashset, and parent hashmap
	push start_node onto the stack and add to visited hashset

	while stack is not empty (as long we have somewhere else to go):
		pop top node off of the stack = current
		if current == target_node:
			return parent hashmap (path from start to goal)

		for each current neighbors n that are not in visted set:
			add n to visited set
			add n to parent hashmap with current as the parent
			push n onto the top of the stack (place to go explore)

DFS recursion algo
# doesn't include stack because it is implicitly leveraged
DFS(start_node, target_node, parents):
	if start_node == target_node:
		return
	for each of start_node neighbors n not in visited set:
		add n to visited set
		add start_node as parent to n in parent hashmap
		DFS(n, target_node, parents)

##########################
breadth first search (BFS)
##########################
only change from DFS algo is how we keep track of where to search for next

how to keep track of where to search next?
use queue - list where you add elements to one end and remove them from other
enqueue = add an element
dequeue = remove an element

BFS algo
BFS(start_node, target_node):
	initialize queue, visited hashset, and parent hashmap
	push start_node onto the queue and add to visited hashset

	while queue is not empty (as long we have somewhere else to go):
		dequeue node from front of queue = current
		if current == target_node:
			return parent hashmap (path from start to goal)

		for each current neighbors n that are not in visted set:
			add n to visited set
			add n to parent hashmap with current as the parent
			enqueue n onto the end of the queue

##########################
Compare performance between BFS and DFS
##########################

How many nodes will each algorithm visit?
O(V) = every vertice (edge) in the worse case scenario

How many edges will each algorithm visit?
O(E) = every edge possible in the worse case scenario

Together worse case runtime is O(V + E)

In the worse case BFS is usually more efficient vs DFS
But DFS usually finds shorter path vs BFS

##########################
Dijkstra's algorithm
##########################
How to keep track of where to search next?

Priority queue
List where you can add {element, priority} to one end
Remove highest priority item from the other
Keep in mind you can have multiple instances of the same node in the queue with different priorities

Dijkstra(start_node, target_node):
	initialize priority queue, visited hashset, parent hashmap
	initialize distance to infinity for each node 

	push start_node onto the queue

	while prioity queue is not empty (as long we have somewhere else to go):
		current = dequeue node from front of queue
		if current != visited: 
			add current to visited set
			if current = target_node:
				return parent map

			for each current neighbors n that are not in visted set:
				if the path to n is shorter than previous distance value stored:
					update distance
					update parent map
					enqueue {n, distance} into priority queue
